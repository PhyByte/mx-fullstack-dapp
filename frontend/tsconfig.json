{
  // compilerOptions contains settings that specify how the compiler should behave
  "compilerOptions": {
    // Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNext'
    "target": "ES2020",
    // Ensure useDefineForClassFields is true for compatibility with certain class features
    "useDefineForClassFields": true,
    // Include additional library files in the compilation
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    // Specify module code generation
    "module": "ESNext",
    // Skip type checking of all declaration files (*.d.ts)
    "skipLibCheck": true,

    /* Bundler mode */
    // Resolve modules using bundler, it's a workaround for vite which uses this resolution strategy
    "moduleResolution": "bundler",
    // Allow importing files with TypeScript (.ts) extension
    "allowImportingTsExtensions": true,
    // Include modules imported with .json extension
    "resolveJsonModule": true,
    // Unconditionally emit imports for side-effects only
    "isolatedModules": true,
    // Do not emit outputs (useful for type-checking only scenarios)
    "noEmit": true,
    // Support JSX in .tsx files: 'react' or 'react-jsx'
    "jsx": "react-jsx",

    /* Linting */
    // Enable all strict type-checking options
    "strict": true,
    // Report errors on unused locals
    "noUnusedLocals": true,
    // Report errors on unused parameters
    "noUnusedParameters": true,
    // Report error when not all code paths in switch statement explicitly break or return
    "noFallthroughCasesInSwitch": true
  },
  // include specifies a list of glob-like file patterns to include in compilation
  "include": ["src"],
  // Project references are a way to structure TypeScript programs into smaller pieces
  "references": [
    {
      // Path to referenced project configuration file or folder containing tsconfig.json
      "path": "./tsconfig.node.json"
    }
  ]
}
